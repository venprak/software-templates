# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/configuration-reference
version: 2.1

orbs:
  aws-ecr: circleci/aws-ecr@8.1.3
  aws-cli: circleci/aws-cli@4.0
  
# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/jobs-steps/#jobs-overview & https://circleci.com/docs/configuration-reference/#jobs
jobs:
  # Below is the definition of your job to build and test your app, you can rename and customize it as you want.
  build-and-test:
    # Specify the execution environment. You can specify an image from Docker Hub or use one of our convenience images from CircleCI's Developer Hub.
    # See: https://circleci.com/docs/executor-intro/ & https://circleci.com/docs/configuration-reference/#executor-job
    docker:
      # Specify the version you desire here
      # See: https://circleci.com/developer/images/image/cimg/openjdk
      - image: cimg/openjdk:11.0

    # Add steps to the job
    # See: https://circleci.com/docs/jobs-steps/#steps-overview & https://circleci.com/docs/configuration-reference/#steps
    steps:
      # Checkout the code as the first step.
      - checkout
      - aws-cli/setup
       

      # Use mvn clean and package as the standard maven build phase
      - run:
          name: Build
          command: mvn -B -DskipTests clean package
      # Then run your tests!
      - run:
          name: Test
          command: mvn test
          
      # Creates a remote Docker environment configured to execute Docker commands.
      # - setup_remote_docker
      - setup_remote_docker

      - run:
        # installs a docker client that will be used to run the docker commands
          name: Install Docker client
          command: |
            set -x
            VER="25.0.5"
            curl -L -o /tmp/docker-$VER.tgz https://download.docker.com/linux/static/stable/x86_64/docker-$VER.tgz
            tar -xz -C /tmp -f /tmp/docker-$VER.tgz
            sudo mv /tmp/docker/* /usr/bin
            
      - run:
         # Builds a docker image to push to Docker Hub
         # Tag (-t) pattern is below, where CircleCI
         # to get the Dockerfile from the current directory.
         # <docker_hub_username/docker-hub-password:version>.
          name: Build Docker image
          command: docker build -t venprak/springtest6:latest .

      - run:
        # Pushes the Docker image you created to the Docker Hub.
        # Replace venprak/hello-world-sample:v1 with the
        # <docker_hub_username/docker-hub-password:version> you used to build the image above
          name: Push to Docker Hub
          command: |
            docker login -u ${DOCKER_USER} -p ${DOCKER_PASS}
            docker push venprak/springtest6:latest
            aws ecr get-login-password --region "us-east-1" | docker login --username AWS --password-stdin "280214392207.dkr.ecr.us-east-1.amazonaws.com"
            docker tag venprak/springtest6:latest 280214392207.dkr.ecr.us-east-1.amazonaws.com/springapplication:springtest6-latest
            docker push 280214392207.dkr.ecr.us-east-1.amazonaws.com/springapplication:springtest6-latest
            

# Orchestrate jobs using workflows
# See: https://circleci.com/docs/workflows/ & https://circleci.com/docs/configuration-reference/#workflows
workflows:
  sample: # This is the name of the workflow, feel free to change it to better match your workflow.
    # Inside the workflow, you define the jobs you want to run.
    jobs:
      - build-and-test
